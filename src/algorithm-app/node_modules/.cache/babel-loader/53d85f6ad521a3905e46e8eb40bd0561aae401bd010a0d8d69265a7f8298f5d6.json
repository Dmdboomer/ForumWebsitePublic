{"ast":null,"code":"const BASE_URL = 'http://localhost:5000/api/nodes';\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        completedScore: score\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\nexport const createChildNodes = async (parentId, title, content) => {\n  try {\n    // Create both requests without awaiting individually\n    const promise1 = fetch('http://localhost:5000/api/nodes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title,\n        content,\n        statementTrueFalseFlag: 1\n      })\n    });\n    const promise2 = fetch('http://localhost:5000/api/nodes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title,\n        content,\n        statementTrueFalseFlag: 0\n      })\n    });\n\n    // Await both concurrently\n    const [res1, res2] = await Promise.all([promise1, promise2]);\n\n    // Check both responses\n    if (!res1.ok || !res2.ok) throw new Error('API call failed');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};","map":{"version":3,"names":["BASE_URL","completeNode","nodeId","score","response","fetch","method","headers","body","JSON","stringify","completedScore","ok","errorData","json","Error","message","statusText","error","console","createChildNodes","parentId","title","content","promise1","parent_id","parseInt","statementTrueFalseFlag","promise2","res1","res2","Promise","all","success"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/services/nodeAPI.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000/api/nodes';\n\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completedScore: score }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\n\nexport const createChildNodes = async (parentId, title, content) => {\n  try {\n    // Create both requests without awaiting individually\n    const promise1 = fetch('http://localhost:5000/api/nodes', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title, \n        content, \n        statementTrueFalseFlag: 1\n      })\n    });\n\n    const promise2 = fetch('http://localhost:5000/api/nodes', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title, \n        content, \n        statementTrueFalseFlag: 0\n      })\n    });\n\n    // Await both concurrently\n    const [res1, res2] = await Promise.all([promise1, promise2]);\n\n    // Check both responses\n    if (!res1.ok || !res2.ok) throw new Error('API call failed');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error:', error);\n    return { success: false, error };\n  }\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,iCAAiC;AAElD,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,KAAK,KAAK;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,IAAIE,MAAM,WAAW,EAAE;MAC7DI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,cAAc,EAAER;MAAM,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,4BAA4BF,SAAS,CAACG,OAAO,IAAIZ,QAAQ,CAACa,UAAU,EAAE,CAAC;IACzF;IACA,OAAOb,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACF,OAAO,CAAC;IACtD,MAAME,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,EAAEC,OAAO,KAAK;EAClE,IAAI;IACF;IACA,MAAMC,QAAQ,GAAGnB,KAAK,CAAC,iCAAiC,EAAE;MACxDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBe,SAAS,EAAEC,QAAQ,CAACL,QAAQ,CAAC;QAC7BC,KAAK;QACLC,OAAO;QACPI,sBAAsB,EAAE;MAC1B,CAAC;IACH,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAGvB,KAAK,CAAC,iCAAiC,EAAE;MACxDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBe,SAAS,EAAEC,QAAQ,CAACL,QAAQ,CAAC;QAC7BC,KAAK;QACLC,OAAO;QACPI,sBAAsB,EAAE;MAC1B,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAM,CAACE,IAAI,EAAEC,IAAI,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACR,QAAQ,EAAEI,QAAQ,CAAC,CAAC;;IAE5D;IACA,IAAI,CAACC,IAAI,CAACjB,EAAE,IAAI,CAACkB,IAAI,CAAClB,EAAE,EAAE,MAAM,IAAIG,KAAK,CAAC,iBAAiB,CAAC;IAE5D,OAAO;MAAEkB,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOf,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO;MAAEe,OAAO,EAAE,KAAK;MAAEf;IAAM,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}