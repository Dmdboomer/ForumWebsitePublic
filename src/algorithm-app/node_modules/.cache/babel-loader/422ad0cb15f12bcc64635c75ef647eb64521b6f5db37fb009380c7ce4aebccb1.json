{"ast":null,"code":"var _jsxFileName = \"/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeSettings/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useEffect, useState } from 'react';\nimport { fetchUserTheme, updateThemePreference } from '../services/themeAPI'; // Adjust path as needed\nimport { useAuth } from '../../CodeLoginAuth/context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext();\nexport const useTheme = () => {\n  _s();\n  return useContext(ThemeContext);\n};\n_s(useTheme, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s2();\n  const {\n    isLoggedIn\n  } = useAuth();\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [isLoading, setIsLoading] = useState(true);\n  const [themeOptions] = useState(['light', 'dark', 'blue', 'contrast'\n  // Add new themes here in the future\n  ]);\n  useEffect(() => {\n    let isMounted = true;\n    const loadTheme = async () => {\n      try {\n        setIsLoading(true);\n        const localTheme = localStorage.getItem('theme');\n        const serverTheme = isLoggedIn ? await fetchUserTheme() : null;\n        const theme = serverTheme || localTheme || getSystemTheme();\n        if (isMounted) {\n          applyThemeToDocument(theme);\n          setCurrentTheme(theme);\n          localStorage.setItem('theme', theme);\n        }\n      } catch (err) {\n        console.error('Theme load error:', err);\n        if (isMounted) applyThemeToDocument('light');\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    loadTheme();\n    return () => {\n      isMounted = false;\n    };\n  }, [isLoggedIn]); // ðŸ‘ˆ Re-run when login status changes\n\n  const getSystemTheme = () => {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';\n  };\n  const applyThemeToDocument = theme => {\n    document.documentElement.setAttribute('data-theme', theme);\n  };\n  const setTheme = async themeName => {\n    if (!themeOptions.includes(themeName)) return;\n\n    // Apply immediately to DOM first\n    applyThemeToDocument(themeName); // ðŸ‘ˆ DOM update FIRST\n    setCurrentTheme(themeName); // ðŸ‘ˆ State update SECOND\n    localStorage.setItem('theme', themeName);\n    try {\n      await updateThemePreference(themeName);\n    } catch (err) {\n      console.error('Theme sync failed:', err);\n      // Optional: Revert to previous theme on error\n    }\n  };\n\n  // To add new themes dynamically (call this in settings UI)\n  const addThemeOption = newTheme => {\n    if (!themeOptions.includes(newTheme)) {\n      themeOptions.push(newTheme);\n      // In real app, you'd trigger a state update here\n    }\n  };\n  const value = {\n    currentTheme,\n    setTheme,\n    isLoading,\n    themeOptions,\n    addThemeOption // For future theme expansions\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s2(ThemeProvider, \"di01+Ppjq7W38PMU50jdhAu89uE=\", false, function () {\n  return [useAuth];\n});\n_c = ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","fetchUserTheme","updateThemePreference","useAuth","jsxDEV","_jsxDEV","ThemeContext","useTheme","_s","ThemeProvider","children","_s2","isLoggedIn","currentTheme","setCurrentTheme","isLoading","setIsLoading","themeOptions","isMounted","loadTheme","localTheme","localStorage","getItem","serverTheme","theme","getSystemTheme","applyThemeToDocument","setItem","err","console","error","window","matchMedia","matches","document","documentElement","setAttribute","setTheme","themeName","includes","addThemeOption","newTheme","push","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeSettings/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\nimport { fetchUserTheme, updateThemePreference } from '../services/themeAPI'; // Adjust path as needed\nimport { useAuth } from '../../CodeLoginAuth/context/AuthContext';\n\nconst ThemeContext = createContext();\n\nexport const useTheme = () => useContext(ThemeContext);\n\nexport const ThemeProvider = ({ children }) => {\n  const { isLoggedIn } = useAuth();\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [isLoading, setIsLoading] = useState(true);\n  const [themeOptions] = useState([\n    'light', \n    'dark', \n    'blue', \n    'contrast'\n    // Add new themes here in the future\n  ]);\n\n  useEffect(() => {\n    let isMounted = true;\n    \n    const loadTheme = async () => {\n      try {\n        setIsLoading(true);\n        const localTheme = localStorage.getItem('theme');\n        const serverTheme = isLoggedIn ? await fetchUserTheme() : null;\n        const theme = serverTheme || localTheme || getSystemTheme();\n        \n        if (isMounted) {\n          applyThemeToDocument(theme);\n          setCurrentTheme(theme);\n          localStorage.setItem('theme', theme);\n        }\n      } catch (err) {\n        console.error('Theme load error:', err);\n        if (isMounted) applyThemeToDocument('light');\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n\n    loadTheme();\n\n    return () => { isMounted = false };\n  }, [isLoggedIn]); // ðŸ‘ˆ Re-run when login status changes\n\n  const getSystemTheme = () => {\n    return window.matchMedia('(prefers-color-scheme: dark)').matches \n      ? 'dark' \n      : 'light';\n  };\n\n  const applyThemeToDocument = (theme) => {\n  document.documentElement.setAttribute('data-theme', theme);\n  };\n\n  const setTheme = async (themeName) => {\n    if (!themeOptions.includes(themeName)) return;\n    \n    // Apply immediately to DOM first\n    applyThemeToDocument(themeName); // ðŸ‘ˆ DOM update FIRST\n    setCurrentTheme(themeName);       // ðŸ‘ˆ State update SECOND\n    localStorage.setItem('theme', themeName);\n    \n    try {\n      await updateThemePreference(themeName);\n    } catch (err) {\n      console.error('Theme sync failed:', err);\n      // Optional: Revert to previous theme on error\n    }\n  };\n\n  // To add new themes dynamically (call this in settings UI)\n  const addThemeOption = (newTheme) => {\n    if (!themeOptions.includes(newTheme)) {\n      themeOptions.push(newTheme);\n      // In real app, you'd trigger a state update here\n    }\n  };\n\n  const value = {\n    currentTheme,\n    setTheme,\n    isLoading,\n    themeOptions,\n    addThemeOption // For future theme expansions\n  };\n\n  return (\n    <ThemeContext.Provider value={value}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}