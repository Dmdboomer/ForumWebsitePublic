{"ast":null,"code":"var _s = $RefreshSig$();\nimport React from 'react';\nimport { fetchComments, endorseComment, unendorseComment, reportComment, unreportComment, createComment } from '../services/commentsAPI';\nimport { useAuth } from '../../CodeLoginAuth/context/AuthContext';\nimport { completeNode } from '../services/nodeAPI';\nconst useCommentsLogic = nodeId => {\n  _s();\n  const [comments, setComments] = React.useState([]);\n  const [showCommentForm, setShowCommentForm] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [processing, setProcessing] = React.useState({});\n  const {\n    user\n  } = useAuth();\n  React.useEffect(() => {\n    let isMounted = true;\n    const loadComments = async () => {\n      try {\n        setIsLoading(true);\n        if (!nodeId) {\n          setComments([]);\n          return;\n        }\n        const userId = (user === null || user === void 0 ? void 0 : user.UUID) || null;\n        const commentsData = await fetchComments(nodeId, userId);\n        if (isMounted) setComments(commentsData);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n    loadComments();\n    return () => {\n      isMounted = false;\n    };\n  }, [nodeId, user]);\n  const handleEndorse = async commentId => {\n    if (processing[commentId] || !user) return;\n    setProcessing(prev => ({\n      ...prev,\n      [commentId]: 'endorsing'\n    }));\n    try {\n      const comment = comments.find(c => c.id === commentId);\n      const isEndorsed = comment === null || comment === void 0 ? void 0 : comment.is_endorsed;\n      const currentEndorsements = (comment === null || comment === void 0 ? void 0 : comment.endorsement_count) || 0;\n      const newEndorsementCount = isEndorsed ? currentEndorsements - 1 : currentEndorsements + 1;\n      if (isEndorsed) {\n        await unendorseComment(nodeId, commentId, user.UUID);\n      } else {\n        await endorseComment(nodeId, commentId, user.UUID);\n      }\n      setComments(prev => prev.map(comment => comment.id === commentId ? {\n        ...comment,\n        is_endorsed: !isEndorsed,\n        endorsement_count: newEndorsementCount\n      } : comment));\n\n      // Trigger node completion after 2 endorsements\n      if (!isEndorsed && newEndorsementCount === 1) {\n        // Use the comment's proStatus instead of hardcoded 1\n        const comment = comments.find(c => c.id === commentId);\n        const score = comment.proStatus;\n        completeNode(nodeId, score).then(() => console.log(`Node ${nodeId} completed after 2 endorsements`)).catch(err => console.error('Node completion error:', err));\n      }\n    } catch (error) {\n      console.error('Error toggling endorsement:', error);\n    } finally {\n      setProcessing(prev => {\n        const newState = {\n          ...prev\n        };\n        delete newState[commentId];\n        return newState;\n      });\n    }\n  };\n  const handleReport = async commentId => {\n    if (processing[commentId] || !user) return;\n    setProcessing(prev => ({\n      ...prev,\n      [commentId]: 'reporting'\n    }));\n    try {\n      var _comments$find;\n      const isReported = (_comments$find = comments.find(c => c.id === commentId)) === null || _comments$find === void 0 ? void 0 : _comments$find.is_reported;\n      if (isReported) {\n        await unreportComment(nodeId, commentId, user.UUID);\n      } else {\n        await reportComment(nodeId, commentId, user.UUID);\n      }\n      setComments(prev => prev.map(comment => comment.id === commentId ? {\n        ...comment,\n        is_reported: !isReported,\n        report_count: isReported ? Math.max(0, comment.report_count - 1) : comment.report_count + 1\n      } : comment));\n    } catch (error) {\n      console.error('Error toggling report:', error);\n    } finally {\n      setProcessing(prev => {\n        const newState = {\n          ...prev\n        };\n        delete newState[commentId];\n        return newState;\n      });\n    }\n  };\n  return {\n    comments,\n    showCommentForm,\n    isLoading,\n    processing,\n    user,\n    setShowCommentForm,\n    handleNewComment,\n    handleEndorse,\n    handleReport\n  };\n};\n_s(useCommentsLogic, \"fZwlFK9GuAIeeodpphviIybEpYY=\", false, function () {\n  return [useAuth];\n});\nexport default useCommentsLogic;","map":{"version":3,"names":["React","fetchComments","endorseComment","unendorseComment","reportComment","unreportComment","createComment","useAuth","completeNode","useCommentsLogic","nodeId","_s","comments","setComments","useState","showCommentForm","setShowCommentForm","isLoading","setIsLoading","processing","setProcessing","user","useEffect","isMounted","loadComments","userId","UUID","commentsData","error","console","handleEndorse","commentId","prev","comment","find","c","id","isEndorsed","is_endorsed","currentEndorsements","endorsement_count","newEndorsementCount","map","score","proStatus","then","log","catch","err","newState","handleReport","_comments$find","isReported","is_reported","report_count","Math","max","handleNewComment"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/components/useCommentsLogic.js"],"sourcesContent":["import React from 'react';\nimport { \n  fetchComments,\n  endorseComment,\n  unendorseComment,\n  reportComment,\n  unreportComment,\n  createComment\n} from '../services/commentsAPI';\nimport { useAuth } from '../../CodeLoginAuth/context/AuthContext';\nimport { completeNode } from '../services/nodeAPI';\n\nconst useCommentsLogic = (nodeId) => {\n  const [comments, setComments] = React.useState([]);\n  const [showCommentForm, setShowCommentForm] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(true);\n  const [processing, setProcessing] = React.useState({});\n  const { user } = useAuth();\n\n  React.useEffect(() => {\n    let isMounted = true;\n\n    const loadComments = async () => {\n      try {\n        setIsLoading(true);\n        if (!nodeId) {\n          setComments([]);\n          return;\n        }\n\n        const userId = user?.UUID || null;\n        const commentsData = await fetchComments(nodeId, userId);\n        if (isMounted) setComments(commentsData);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    };\n\n    loadComments();\n\n    return () => { isMounted = false; };\n  }, [nodeId, user]);\n\n\n   const handleEndorse = async (commentId) => {\n    if (processing[commentId] || !user) return;\n    \n    setProcessing(prev => ({...prev, [commentId]: 'endorsing'}));\n    try {\n      const comment = comments.find(c => c.id === commentId);\n      const isEndorsed = comment?.is_endorsed;\n      const currentEndorsements = comment?.endorsement_count || 0;\n      const newEndorsementCount = isEndorsed ? currentEndorsements - 1 : currentEndorsements + 1;\n\n      if (isEndorsed) {\n        await unendorseComment(nodeId, commentId, user.UUID);\n      } else {\n        await endorseComment(nodeId, commentId, user.UUID);\n      }\n      \n      setComments(prev => prev.map(comment => \n        comment.id === commentId \n          ? { \n              ...comment, \n              is_endorsed: !isEndorsed,\n              endorsement_count: newEndorsementCount\n            } \n          : comment\n      ));\n\n      // Trigger node completion after 2 endorsements\n      if (!isEndorsed && newEndorsementCount === 1) {\n        // Use the comment's proStatus instead of hardcoded 1\n        const comment = comments.find(c => c.id === commentId);\n        const score = comment.proStatus;\n        completeNode(nodeId, score)\n          .then(() => console.log(`Node ${nodeId} completed after 2 endorsements`))\n          .catch(err => console.error('Node completion error:', err));\n      }\n    } catch (error) {\n      console.error('Error toggling endorsement:', error);\n    } finally {\n      setProcessing(prev => {\n        const newState = {...prev};\n        delete newState[commentId];\n        return newState;\n      });\n    }\n  };\n\n  const handleReport = async (commentId) => {\n    if (processing[commentId] || !user) return;\n    \n    setProcessing(prev => ({...prev, [commentId]: 'reporting'}));\n    try {\n      const isReported = comments.find(c => c.id === commentId)?.is_reported;\n      \n      if (isReported) {\n        await unreportComment(nodeId, commentId, user.UUID);\n      } else {\n        await reportComment(nodeId, commentId, user.UUID);\n      }\n      \n      setComments(prev => prev.map(comment => \n        comment.id === commentId \n          ? { \n              ...comment, \n              is_reported: !isReported,\n              report_count: isReported \n                ? Math.max(0, comment.report_count - 1)\n                : comment.report_count + 1\n            } \n          : comment\n      ));\n    } catch (error) {\n      console.error('Error toggling report:', error);\n    } finally {\n      setProcessing(prev => {\n        const newState = {...prev};\n        delete newState[commentId];\n        return newState;\n      });\n    }\n  };\n\n  return {\n    comments,\n    showCommentForm,\n    isLoading,\n    processing,\n    user,\n    setShowCommentForm,\n    handleNewComment,\n    handleEndorse,\n    handleReport\n  };\n};\n\nexport default useCommentsLogic;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}