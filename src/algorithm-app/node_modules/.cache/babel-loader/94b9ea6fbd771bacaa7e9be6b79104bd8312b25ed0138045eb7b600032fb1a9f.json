{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{checkSession,loginUser,logoutUser,loginWithGoogleAPI}from'../services/auth';// Add logoutUser import\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);// Track authentication errors\n// Initialize session on app load\nuseEffect(()=>{let isMounted=true;// Prevent state updates on unmounted component\nconst initializeAuth=async()=>{try{const userData=await checkSession();if(isMounted)setUser(userData);}catch(err){if(isMounted){setUser(null);setError('Session validation failed');}}finally{if(isMounted)setLoading(false);}};initializeAuth();return()=>{isMounted=false;// Cleanup function\n};},[]);// Handle login with proper error handling\nconst login=async(email,password)=>{setLoading(true);// Set loading during login process\ntry{const userData=await loginUser(email,password);setUser(userData);setError(null);// Clear previous errors\nreturn userData;// Return data for redirection\n}catch(err){setError('Login failed. Check credentials');throw err;// Rethrow for UI handling\n}finally{setLoading(false);}};// Add logout functionality\nconst logout=async()=>{setLoading(true);try{await logoutUser();setUser(null);}catch(err){setError('Logout failed');}finally{setLoading(false);}};const loginWithGoogle=async token=>{setLoading(true);try{const userData=await loginWithGoogleAPI(token);setUser(userData);setError(null);return userData;}catch(err){setError('Google login failed BRUH');throw err;}finally{setLoading(false);}};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,loading,error,login,logout,loginWithGoogle,isLoggedIn:!!user},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","checkSession","loginUser","logoutUser","loginWithGoogleAPI","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","loading","setLoading","error","setError","isMounted","initializeAuth","userData","err","login","email","password","logout","loginWithGoogle","token","Provider","value","isLoggedIn","useAuth"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeLoginAuth/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { checkSession, loginUser, logoutUser, loginWithGoogleAPI } from '../services/auth'; // Add logoutUser import\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null); // Track authentication errors\n\n  // Initialize session on app load\n  useEffect(() => {\n    let isMounted = true; // Prevent state updates on unmounted component\n    \n    const initializeAuth = async () => {\n      try {\n        const userData = await checkSession();\n        if (isMounted) setUser(userData);\n      } catch (err) {\n        if (isMounted) {\n          setUser(null);\n          setError('Session validation failed');\n        }\n      } finally {\n        if (isMounted) setLoading(false);\n      }\n    };\n    \n    initializeAuth();\n    \n    return () => {\n      isMounted = false; // Cleanup function\n    };\n  }, []);\n\n  // Handle login with proper error handling\n  const login = async (email, password) => {\n    setLoading(true); // Set loading during login process\n    try {\n      const userData = await loginUser(email, password);\n      setUser(userData);\n      setError(null); // Clear previous errors\n      return userData; // Return data for redirection\n    } catch (err) {\n      setError('Login failed. Check credentials');\n      throw err; // Rethrow for UI handling\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Add logout functionality\n  const logout = async () => {\n    setLoading(true);\n    try {\n      await logoutUser();\n      setUser(null);\n    } catch (err) {\n      setError('Logout failed');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loginWithGoogle = async (token) => {\n    setLoading(true);\n    try {\n      const userData = await loginWithGoogleAPI(token);\n      setUser(userData);\n      setError(null);\n      return userData;\n    } catch (err) {\n      setError('Google login failed BRUH');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, error, login, logout, loginWithGoogle, isLoggedIn: !!user }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => useContext(AuthContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}