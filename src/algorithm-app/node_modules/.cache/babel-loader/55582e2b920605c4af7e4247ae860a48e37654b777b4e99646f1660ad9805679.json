{"ast":null,"code":"export const searchAPI = {\n  performSearch: async (term, startDate, endDate) => {\n    try {\n      if (!(term !== null && term !== void 0 && term.trim())) throw new Error('Search term is required');\n      const baseUrl = process.env.REACT_APP_API_BASE_URL || window.location.origin;\n      const url = new URL(`${baseUrl}/api/search`);\n      url.searchParams.append('term', encodeURIComponent(term.trim()));\n      if (startDate && !isNaN(new Date(startDate).getTime())) {\n        url.searchParams.append('startDate', new Date(startDate).toISOString());\n      }\n      if (endDate && !isNaN(new Date(endDate).getTime())) {\n        url.searchParams.append('endDate', new Date(endDate).toISOString());\n      }\n      const response = await fetch(url.toString());\n      if (!response.ok) throw new Error(`HTTP error: ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Search failed:', error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["searchAPI","performSearch","term","startDate","endDate","trim","Error","baseUrl","process","env","REACT_APP_API_BASE_URL","window","location","origin","url","URL","searchParams","append","encodeURIComponent","isNaN","Date","getTime","toISOString","response","fetch","toString","ok","status","json","error","console"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeHome/services/searchAPI.js"],"sourcesContent":["export const searchAPI = {\n  performSearch: async (term, startDate, endDate) => {\n    try {\n      if (!term?.trim()) throw new Error('Search term is required');\n      \n      const baseUrl = process.env.REACT_APP_API_BASE_URL || window.location.origin;\n      const url = new URL(`${baseUrl}/api/search`);\n      \n      url.searchParams.append('term', encodeURIComponent(term.trim()));\n      if (startDate && !isNaN(new Date(startDate).getTime())) {\n        url.searchParams.append('startDate', new Date(startDate).toISOString());\n      }\n      if (endDate && !isNaN(new Date(endDate).getTime())) {\n        url.searchParams.append('endDate', new Date(endDate).toISOString());\n      }\n\n      const response = await fetch(url.toString());\n      if (!response.ok) throw new Error(`HTTP error: ${response.status}`);\n      return await response.json();\n    } catch (error) {\n      console.error('Search failed:', error);\n      throw error;\n    }\n  }\n};"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAG;EACvBC,aAAa,EAAE,MAAAA,CAAOC,IAAI,EAAEC,SAAS,EAAEC,OAAO,KAAK;IACjD,IAAI;MACF,IAAI,EAACF,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEG,IAAI,CAAC,CAAC,GAAE,MAAM,IAAIC,KAAK,CAAC,yBAAyB,CAAC;MAE7D,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB,IAAIC,MAAM,CAACC,QAAQ,CAACC,MAAM;MAC5E,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAAC,GAAGR,OAAO,aAAa,CAAC;MAE5CO,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,MAAM,EAAEC,kBAAkB,CAAChB,IAAI,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;MAChE,IAAIF,SAAS,IAAI,CAACgB,KAAK,CAAC,IAAIC,IAAI,CAACjB,SAAS,CAAC,CAACkB,OAAO,CAAC,CAAC,CAAC,EAAE;QACtDP,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,WAAW,EAAE,IAAIG,IAAI,CAACjB,SAAS,CAAC,CAACmB,WAAW,CAAC,CAAC,CAAC;MACzE;MACA,IAAIlB,OAAO,IAAI,CAACe,KAAK,CAAC,IAAIC,IAAI,CAAChB,OAAO,CAAC,CAACiB,OAAO,CAAC,CAAC,CAAC,EAAE;QAClDP,GAAG,CAACE,YAAY,CAACC,MAAM,CAAC,SAAS,EAAE,IAAIG,IAAI,CAAChB,OAAO,CAAC,CAACkB,WAAW,CAAC,CAAC,CAAC;MACrE;MAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,CAACW,QAAQ,CAAC,CAAC,CAAC;MAC5C,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE,MAAM,IAAIpB,KAAK,CAAC,eAAeiB,QAAQ,CAACI,MAAM,EAAE,CAAC;MACnE,OAAO,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}