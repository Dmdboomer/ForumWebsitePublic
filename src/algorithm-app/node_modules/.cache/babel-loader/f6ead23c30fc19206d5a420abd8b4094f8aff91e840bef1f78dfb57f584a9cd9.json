{"ast":null,"code":"import axios from 'axios';\n\n// Session check\nexport const checkSession = async () => {\n  try {\n    const response = await axios.get('/api/user', {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Not authenticated');\n    }\n    throw error;\n  }\n};\n\n// Login\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await axios.post('/api/login', {\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Login failed');\n    }\n    throw error;\n  }\n};\n\n// Signup\nexport const signupUser = async (name, email, password) => {\n  try {\n    const response = await axios.post('/api/signup', {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    if (response.status !== 201) {\n      throw new Error(response.data.error || 'Signup failed');\n    }\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.error || 'Signup failed');\n    }\n    throw error;\n  }\n};\n\n// Logout\nexport const logoutUser = async () => {\n  try {\n    const response = await axios.post('/api/logout', {}, {\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error('Logout failed');\n    }\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Logout failed');\n    }\n    throw error;\n  }\n};\n\n// Dashboard data\nexport const getDashboardData = async () => {\n  try {\n    const response = await axios.get('/dashboard', {\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Failed to fetch dashboard data');\n    }\n    throw error;\n  }\n};\n\n// Google login\nexport const loginWithGoogleAPI = async token => {\n  try {\n    const response = await axios.post('/api/auth/google', {\n      token\n    }, {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Google login failed');\n    }\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","checkSession","response","get","withCredentials","data","error","status","Error","loginUser","email","password","post","headers","signupUser","name","logoutUser","getDashboardData","loginWithGoogleAPI","token"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/src/algorithm-app/src/CodeLoginAuth/services/auth.js"],"sourcesContent":["import axios from 'axios';\n\n// Session check\nexport const checkSession = async () => {\n  try {\n    const response = await axios.get('/api/user', { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Not authenticated');\n    }\n    throw error;\n  }\n};\n\n// Login\nexport const loginUser = async (email, password) => {\n  try {\n    const response = await axios.post('/api/login', { email, password }, {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Login failed');\n    }\n    throw error;\n  }\n};\n\n// Signup\nexport const signupUser = async (name, email, password) => {\n  try {\n    const response = await axios.post('/api/signup', { name, email, password }, {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true\n    });\n    if (response.status !== 201) {\n      throw new Error(response.data.error || 'Signup failed');\n    }\n  } catch (error) {\n    if (error.response) {\n      throw new Error(error.response.data.error || 'Signup failed');\n    }\n    throw error;\n  }\n};\n\n// Logout\nexport const logoutUser = async () => {\n  try {\n    const response = await axios.post('/api/logout', {}, {\n      withCredentials: true\n    });\n    if (response.status !== 200) {\n      throw new Error('Logout failed');\n    }\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Logout failed');\n    }\n    throw error;\n  }\n};\n\n// Dashboard data\nexport const getDashboardData = async () => {\n  try {\n    const response = await axios.get('/dashboard', { withCredentials: true });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Failed to fetch dashboard data');\n    }\n    throw error;\n  }\n};\n\n// Google login\nexport const loginWithGoogleAPI = async (token) => {\n  try {\n    const response = await axios.post('/api/auth/google', { token }, {\n      headers: { 'Content-Type': 'application/json' },\n      withCredentials: true\n    });\n    return response.data;\n  } catch (error) {\n    if (!error.response || error.response.status !== 200) {\n      throw new Error('Google login failed');\n    }\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}