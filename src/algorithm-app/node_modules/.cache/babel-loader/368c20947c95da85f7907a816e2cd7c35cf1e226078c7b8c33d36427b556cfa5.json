{"ast":null,"code":"// src/services/commentsAPI.js\nexport const fetchComments=async function(nodeId){let userId=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;const url=new URL(\"/api/nodes/\".concat(nodeId,\"/comments\"));if(userId)url.searchParams.append('userId',userId);const response=await fetch(url);if(!response.ok)throw new Error('Network response was not ok');return response.json();};export const refreshComments=async nodeId=>{const response=await fetch(\"/api/nodes/\".concat(nodeId,\"/comments\"));if(!response.ok)throw new Error('Failed to refresh comments');return response.json();};export const createComment=async(nodeId,content,proStatus)=>{try{const response=await fetch(\"/api/nodes/\".concat(nodeId,\"/comments\"),{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify({content,proStatus})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'API request failed');}return await response.json();}catch(error){console.error('API call error:',error);throw error;}};export const endorseComment=async(nodeId,commentId,userId)=>{try{const response=await fetch(\"/api/nodes/\".concat(nodeId,\"/comments/\").concat(commentId,\"/endorse/\").concat(userId),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to endorse comment');}return await response.json();}catch(error){console.error('Endorse error:',error);throw error;}};// NEW: Report comment endpoint\nexport const reportComment=async(nodeId,commentId,userId)=>{try{const response=await fetch(\"/api/nodes/\".concat(nodeId,\"/comments/\").concat(commentId,\"/report/\").concat(userId),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to report comment');}return await response.json();}catch(error){console.error('Report error:',error);throw error;}};export const unendorseComment=async(nodeId,commentId,userId)=>{try{const response=await fetch(\"/api/\".concat(nodeId,\"/comments/\").concat(commentId,\"/unendorse/\").concat(userId),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to unendorse comment');}return await response.json();}catch(error){console.error('unendorse error:',error);throw error;}};// NEW: Report comment endpoint\nexport const unreportComment=async(nodeId,commentId,userId)=>{try{const response=await fetch(\"/api/\".concat(nodeId,\"/comments/\").concat(commentId,\"/unreport/\").concat(userId),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.message||'Failed to unreport comment');}return await response.json();}catch(error){console.error('Report error:',error);throw error;}};","map":{"version":3,"names":["fetchComments","nodeId","userId","arguments","length","undefined","url","URL","concat","searchParams","append","response","fetch","ok","Error","json","refreshComments","createComment","content","proStatus","method","headers","body","JSON","stringify","errorData","message","error","console","endorseComment","commentId","reportComment","unendorseComment","unreportComment"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/services/commentsAPI.js"],"sourcesContent":["// src/services/commentsAPI.js\n\nexport const fetchComments = async (nodeId, userId = null) => {\n  const url = new URL(`/api/nodes/${nodeId}/comments`);\n  if (userId) url.searchParams.append('userId', userId);\n  \n  const response = await fetch(url);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n};\n\nexport const refreshComments = async (nodeId) => {\n  const response = await fetch(`/api/nodes/${nodeId}/comments`);\n  if (!response.ok) throw new Error('Failed to refresh comments');\n  return response.json();\n};\n\nexport const createComment = async (nodeId, content, proStatus) => {\n  try {\n    const response = await fetch(`/api/nodes/${nodeId}/comments`, {\n      method: 'POST',\n      headers: { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({content, proStatus } )\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error;\n  }\n};\n\nexport const endorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`/api/nodes/${nodeId}/comments/${commentId}/endorse/${userId}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to endorse comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Endorse error:', error);\n    throw error;\n  }\n};\n\n// NEW: Report comment endpoint\nexport const reportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`/api/nodes/${nodeId}/comments/${commentId}/report/${userId}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to report comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Report error:', error);\n    throw error;\n  }\n};\n\nexport const unendorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`/api/${nodeId}/comments/${commentId}/unendorse/${userId}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to unendorse comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('unendorse error:', error);\n    throw error;\n  }\n};\n\n// NEW: Report comment endpoint\nexport const unreportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`/api/${nodeId}/comments/${commentId}/unreport/${userId}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' }\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to unreport comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Report error:', error);\n    throw error;\n  }\n};"],"mappings":"AAAA;AAEA,MAAO,MAAM,CAAAA,aAAa,CAAG,cAAAA,CAAOC,MAAM,CAAoB,IAAlB,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,IAAI,CACvD,KAAM,CAAAG,GAAG,CAAG,GAAI,CAAAC,GAAG,eAAAC,MAAA,CAAeP,MAAM,aAAW,CAAC,CACpD,GAAIC,MAAM,CAAEI,GAAG,CAACG,YAAY,CAACC,MAAM,CAAC,QAAQ,CAAER,MAAM,CAAC,CAErD,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACN,GAAG,CAAC,CACjC,GAAI,CAACK,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,6BAA6B,CAAC,CAChE,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACxB,CAAC,CAED,MAAO,MAAM,CAAAC,eAAe,CAAG,KAAO,CAAAf,MAAM,EAAK,CAC/C,KAAM,CAAAU,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAAJ,MAAA,CAAeP,MAAM,aAAW,CAAC,CAC7D,GAAI,CAACU,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAC,KAAK,CAAC,4BAA4B,CAAC,CAC/D,MAAO,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CACxB,CAAC,CAED,MAAO,MAAM,CAAAE,aAAa,CAAG,KAAAA,CAAOhB,MAAM,CAAEiB,OAAO,CAAEC,SAAS,GAAK,CACjE,GAAI,CACF,KAAM,CAAAR,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAAJ,MAAA,CAAeP,MAAM,cAAa,CAC5DmB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACZ,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAACN,OAAO,CAAEC,SAAU,CAAE,CAC7C,CAAC,CAAC,CAEF,GAAI,CAACR,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAD,KAAK,CAACW,SAAS,CAACC,OAAO,EAAI,oBAAoB,CAAC,CAC5D,CAEA,MAAO,MAAM,CAAAf,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAE,cAAc,CAAG,KAAAA,CAAO5B,MAAM,CAAE6B,SAAS,CAAE5B,MAAM,GAAK,CACjE,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAAJ,MAAA,CAAeP,MAAM,eAAAO,MAAA,CAAasB,SAAS,cAAAtB,MAAA,CAAYN,MAAM,EAAI,CAC3FkB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CAEF,GAAI,CAACV,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAD,KAAK,CAACW,SAAS,CAACC,OAAO,EAAI,2BAA2B,CAAC,CACnE,CAEA,MAAO,MAAM,CAAAf,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CACtC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAI,aAAa,CAAG,KAAAA,CAAO9B,MAAM,CAAE6B,SAAS,CAAE5B,MAAM,GAAK,CAChE,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,eAAAJ,MAAA,CAAeP,MAAM,eAAAO,MAAA,CAAasB,SAAS,aAAAtB,MAAA,CAAWN,MAAM,EAAI,CAC1FkB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CAEF,GAAI,CAACV,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAD,KAAK,CAACW,SAAS,CAACC,OAAO,EAAI,0BAA0B,CAAC,CAClE,CAEA,MAAO,MAAM,CAAAf,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED,MAAO,MAAM,CAAAK,gBAAgB,CAAG,KAAAA,CAAO/B,MAAM,CAAE6B,SAAS,CAAE5B,MAAM,GAAK,CACnE,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,SAAAJ,MAAA,CAASP,MAAM,eAAAO,MAAA,CAAasB,SAAS,gBAAAtB,MAAA,CAAcN,MAAM,EAAI,CACvFkB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CAEF,GAAI,CAACV,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAD,KAAK,CAACW,SAAS,CAACC,OAAO,EAAI,6BAA6B,CAAC,CACrE,CAEA,MAAO,MAAM,CAAAf,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,CAAEA,KAAK,CAAC,CACxC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,eAAe,CAAG,KAAAA,CAAOhC,MAAM,CAAE6B,SAAS,CAAE5B,MAAM,GAAK,CAClE,GAAI,CACF,KAAM,CAAAS,QAAQ,CAAG,KAAM,CAAAC,KAAK,SAAAJ,MAAA,CAASP,MAAM,eAAAO,MAAA,CAAasB,SAAS,eAAAtB,MAAA,CAAaN,MAAM,EAAI,CACtFkB,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CAEF,GAAI,CAACV,QAAQ,CAACE,EAAE,CAAE,CAChB,KAAM,CAAAY,SAAS,CAAG,KAAM,CAAAd,QAAQ,CAACI,IAAI,CAAC,CAAC,CACvC,KAAM,IAAI,CAAAD,KAAK,CAACW,SAAS,CAACC,OAAO,EAAI,4BAA4B,CAAC,CACpE,CAEA,MAAO,MAAM,CAAAf,QAAQ,CAACI,IAAI,CAAC,CAAC,CAC9B,CAAE,MAAOY,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrC,KAAM,CAAAA,KAAK,CACb,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}