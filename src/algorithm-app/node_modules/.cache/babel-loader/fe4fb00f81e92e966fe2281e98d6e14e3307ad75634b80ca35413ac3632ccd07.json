{"ast":null,"code":"const BASE_URL = 'http://localhost:5000/api/nodes';\nexport const fetchNode = async id => {\n  const response = await fetch(`${BASE_URL}/${id}`);\n  return await response.json();\n};\nexport const fetchNodeChildren = async id => {\n  const response = await fetch(`${BASE_URL}/${id}/children`);\n  return await response.json();\n};\nexport const fetchNodePath = async id => {\n  const response = await fetch(`${BASE_URL}/${id}/path`);\n  const data = await response.json();\n  return data.reverse(); // Move the reverse logic here\n};\nexport const fetchNodeTree = async (id, depth = 4) => {\n  const response = await fetch(`${BASE_URL}/${id}/tree?depth=${depth}`);\n  return await response.json();\n};\nexport const fetchAllNodeData = async id => {\n  const [node, children, path, tree] = await Promise.all([fetchNode(id), fetchNodeChildren(id), fetchNodePath(id), fetchNodeTree(id)]);\n  return {\n    node,\n    children,\n    path,\n    tree\n  };\n};\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        completedScore: score\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\nexport const createChildNodes = async (parentId, title, content) => {\n  try {\n    // Create both requests without awaiting individually\n    const promise1 = fetch(`${BASE_URL}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title,\n        content,\n        statementTrueFalseFlag: 1\n      })\n    });\n    const promise2 = fetch('http://localhost:5000/api/nodes', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title,\n        content,\n        statementTrueFalseFlag: 0\n      })\n    });\n\n    // Await both concurrently\n    const [res1, res2] = await Promise.all([promise1, promise2]);\n\n    // Check both responses\n    if (!res1.ok || !res2.ok) throw new Error('API call failed');\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Error:', error);\n    return {\n      success: false,\n      error\n    };\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchNode","id","response","fetch","json","fetchNodeChildren","fetchNodePath","data","reverse","fetchNodeTree","depth","fetchAllNodeData","node","children","path","tree","Promise","all","completeNode","nodeId","score","method","headers","body","JSON","stringify","completedScore","ok","errorData","Error","message","statusText","error","console","createChildNodes","parentId","title","content","promise1","parent_id","parseInt","statementTrueFalseFlag","promise2","res1","res2","success"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/services/nodeAPI.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000/api/nodes';\n\nexport const fetchNode = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}`);\n  return await response.json();\n};\n\nexport const fetchNodeChildren = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}/children`);\n  return await response.json();\n};\n\nexport const fetchNodePath = async (id) => {\n  const response = await fetch(`${BASE_URL}/${id}/path`);\n  const data = await response.json();\n  return data.reverse(); // Move the reverse logic here\n};\n\nexport const fetchNodeTree = async (id, depth = 4) => {\n  const response = await fetch(`${BASE_URL}/${id}/tree?depth=${depth}`);\n  return await response.json();\n};\n\nexport const fetchAllNodeData = async (id) => {\n  const [node, children, path, tree] = await Promise.all([\n    fetchNode(id),\n    fetchNodeChildren(id),\n    fetchNodePath(id),\n    fetchNodeTree(id)\n  ]);\n  return { node, children, path, tree };\n};\n\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completedScore: score }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\n\nexport const createChildNodes = async (parentId, title, content) => {\n  try {\n    // Create both requests without awaiting individually\n    const promise1 = fetch(`${BASE_URL}`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title, \n        content, \n        statementTrueFalseFlag: 1\n      })\n    });\n\n    const promise2 = fetch('http://localhost:5000/api/nodes', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title, \n        content, \n        statementTrueFalseFlag: 0\n      })\n    });\n\n    // Await both concurrently\n    const [res1, res2] = await Promise.all([promise1, promise2]);\n\n    // Check both responses\n    if (!res1.ok || !res2.ok) throw new Error('API call failed');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error:', error);\n    return { success: false, error };\n  }\n};"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,iCAAiC;AAElD,OAAO,MAAMC,SAAS,GAAG,MAAOC,EAAE,IAAK;EACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIE,EAAE,EAAE,CAAC;EACjD,OAAO,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAG,MAAOJ,EAAE,IAAK;EAC7C,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIE,EAAE,WAAW,CAAC;EAC1D,OAAO,MAAMC,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAME,aAAa,GAAG,MAAOL,EAAE,IAAK;EACzC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIE,EAAE,OAAO,CAAC;EACtD,MAAMM,IAAI,GAAG,MAAML,QAAQ,CAACE,IAAI,CAAC,CAAC;EAClC,OAAOG,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOR,EAAE,EAAES,KAAK,GAAG,CAAC,KAAK;EACpD,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIE,EAAE,eAAeS,KAAK,EAAE,CAAC;EACrE,OAAO,MAAMR,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC9B,CAAC;AAED,OAAO,MAAMO,gBAAgB,GAAG,MAAOV,EAAE,IAAK;EAC5C,MAAM,CAACW,IAAI,EAAEC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CACrDjB,SAAS,CAACC,EAAE,CAAC,EACbI,iBAAiB,CAACJ,EAAE,CAAC,EACrBK,aAAa,CAACL,EAAE,CAAC,EACjBQ,aAAa,CAACR,EAAE,CAAC,CAClB,CAAC;EACF,OAAO;IAAEW,IAAI;IAAEC,QAAQ;IAAEC,IAAI;IAAEC;EAAK,CAAC;AACvC,CAAC;AAED,OAAO,MAAMG,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,KAAK,KAAK;EACnD,IAAI;IACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,QAAQ,IAAIoB,MAAM,WAAW,EAAE;MAC7DE,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,cAAc,EAAEN;MAAM,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,CAAClB,QAAQ,CAACyB,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAM1B,QAAQ,CAACE,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIyB,KAAK,CAAC,4BAA4BD,SAAS,CAACE,OAAO,IAAI5B,QAAQ,CAAC6B,UAAU,EAAE,CAAC;IACzF;IACA,OAAO7B,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAO4B,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACF,OAAO,CAAC;IACtD,MAAME,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,KAAK,EAAEC,OAAO,KAAK;EAClE,IAAI;IACF;IACA,MAAMC,QAAQ,GAAGnC,KAAK,CAAC,GAAGJ,QAAQ,EAAE,EAAE;MACpCsB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBc,SAAS,EAAEC,QAAQ,CAACL,QAAQ,CAAC;QAC7BC,KAAK;QACLC,OAAO;QACPI,sBAAsB,EAAE;MAC1B,CAAC;IACH,CAAC,CAAC;IAEF,MAAMC,QAAQ,GAAGvC,KAAK,CAAC,iCAAiC,EAAE;MACxDkB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBc,SAAS,EAAEC,QAAQ,CAACL,QAAQ,CAAC;QAC7BC,KAAK;QACLC,OAAO;QACPI,sBAAsB,EAAE;MAC1B,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,MAAM,CAACE,IAAI,EAAEC,IAAI,CAAC,GAAG,MAAM5B,OAAO,CAACC,GAAG,CAAC,CAACqB,QAAQ,EAAEI,QAAQ,CAAC,CAAC;;IAE5D;IACA,IAAI,CAACC,IAAI,CAAChB,EAAE,IAAI,CAACiB,IAAI,CAACjB,EAAE,EAAE,MAAM,IAAIE,KAAK,CAAC,iBAAiB,CAAC;IAE5D,OAAO;MAAEgB,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOb,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAC9B,OAAO;MAAEa,OAAO,EAAE,KAAK;MAAEb;IAAM,CAAC;EAClC;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}