{"ast":null,"code":"export const fetchNode=async id=>{const response=await fetch(\"/api/\".concat(id));return await response.json();};export const fetchNodeChildren=async id=>{const response=await fetch(\"/api/nodes/\".concat(id,\"/children\"));return await response.json();};export const fetchNodePath=async id=>{const response=await fetch(\"/api/nodes/\".concat(id,\"/path\"));const data=await response.json();return data.reverse();// Move the reverse logic here\n};export const fetchNodeTree=async function(id){let depth=arguments.length>1&&arguments[1]!==undefined?arguments[1]:4;const response=await fetch(\"/api/nodes/\".concat(id,\"/tree?depth=\").concat(depth));return await response.json();};export const fetchAllNodeData=async id=>{const[node,children,path,tree]=await Promise.all([fetchNode(id),fetchNodeChildren(id),fetchNodePath(id),fetchNodeTree(id)]);return{node,children,path,tree};};export const completeNode=async(nodeId,score)=>{try{const response=await fetch(\"/api/nodes/\".concat(nodeId,\"/complete\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({completedScore:score})});if(!response.ok){const errorData=await response.json();throw new Error(\"Failed to complete node: \".concat(errorData.message||response.statusText));}return response.json();}catch(error){console.error(\"Error in completeNode:\",error.message);throw error;}};export const createChildNodes=async(parentId,title,content)=>{try{// Create both requests without awaiting individually\nconst promise1=fetch('/api/nodes',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({parent_id:parseInt(parentId),title,content,statementTrueFalseFlag:1})});const promise2=fetch('/api/nodes',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({parent_id:parseInt(parentId),title,content,statementTrueFalseFlag:0})});// Await both concurrently\nconst[res1,res2]=await Promise.all([promise1,promise2]);// Check both responses\nif(!res1.ok||!res2.ok)throw new Error('API call failed');return{success:true};}catch(error){console.error('Error:',error);return{success:false,error};}};","map":{"version":3,"names":["fetchNode","id","response","fetch","concat","json","fetchNodeChildren","fetchNodePath","data","reverse","fetchNodeTree","depth","arguments","length","undefined","fetchAllNodeData","node","children","path","tree","Promise","all","completeNode","nodeId","score","method","headers","body","JSON","stringify","completedScore","ok","errorData","Error","message","statusText","error","console","createChildNodes","parentId","title","content","promise1","parent_id","parseInt","statementTrueFalseFlag","promise2","res1","res2","success"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/services/nodeAPI.js"],"sourcesContent":["\nexport const fetchNode = async (id) => {\n  const response = await fetch(`/api/${id}`);\n  return await response.json();\n};\n\nexport const fetchNodeChildren = async (id) => {\n  const response = await fetch(`/api/nodes/${id}/children`);\n  return await response.json();\n};\n\nexport const fetchNodePath = async (id) => {\n  const response = await fetch(`/api/nodes/${id}/path`);\n  const data = await response.json();\n  return data.reverse(); // Move the reverse logic here\n};\n\nexport const fetchNodeTree = async (id, depth = 4) => {\n  const response = await fetch(`/api/nodes/${id}/tree?depth=${depth}`);\n  return await response.json();\n};\n\nexport const fetchAllNodeData = async (id) => {\n  const [node, children, path, tree] = await Promise.all([\n    fetchNode(id),\n    fetchNodeChildren(id),\n    fetchNodePath(id),\n    fetchNodeTree(id)\n  ]);\n  return { node, children, path, tree };\n};\n\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`/api/nodes/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completedScore: score }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\n\nexport const createChildNodes = async (parentId, title, content) => {\n  try {\n    // Create both requests without awaiting individually\n    const promise1 = fetch('/api/nodes', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title, \n        content, \n        statementTrueFalseFlag: 1\n      })\n    });\n\n    const promise2 = fetch('/api/nodes', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        parent_id: parseInt(parentId),\n        title, \n        content, \n        statementTrueFalseFlag: 0\n      })\n    });\n\n    // Await both concurrently\n    const [res1, res2] = await Promise.all([promise1, promise2]);\n\n    // Check both responses\n    if (!res1.ok || !res2.ok) throw new Error('API call failed');\n    \n    return { success: true };\n  } catch (error) {\n    console.error('Error:', error);\n    return { success: false, error };\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}