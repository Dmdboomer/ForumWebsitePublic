{"ast":null,"code":"// src/services/commentsAPI.js\nimport axios from 'axios';\nexport const fetchComments = async (nodeId, userId = null) => {\n  try {\n    const response = await axios.get(`/api/nodes/${nodeId}/comments`, {\n      params: {\n        userId\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response, _error$response$data;\n    throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Network response was not ok');\n  }\n};\nexport const refreshComments = async nodeId => {\n  try {\n    const response = await axios.get(`/api/nodes/${nodeId}/comments`);\n    return response.data;\n  } catch (error) {\n    var _error$response2, _error$response2$data;\n    throw new Error(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to refresh comments');\n  }\n};\nexport const createComment = async (nodeId, content, proStatus) => {\n  try {\n    const response = await axios.post(`/api/nodes/${nodeId}/comments`, {\n      content,\n      proStatus\n    }, {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response3, _error$response3$data;\n    console.error('API call error:', error);\n    throw new Error(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'API request failed');\n  }\n};\nexport const endorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(`/api/nodes/${nodeId}/comments/${commentId}/endorse/${userId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response4, _error$response4$data;\n    console.error('Endorse error:', error);\n    throw new Error(((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to endorse comment');\n  }\n};\nexport const reportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(`/api/nodes/${nodeId}/comments/${commentId}/report/${userId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response5, _error$response5$data;\n    console.error('Report error:', error);\n    throw new Error(((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to report comment');\n  }\n};\nexport const unendorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(`/api/${nodeId}/comments/${commentId}/unendorse/${userId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response6, _error$response6$data;\n    console.error('unendorse error:', error);\n    throw new Error(((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to unendorse comment');\n  }\n};\nexport const unreportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(`/api/${nodeId}/comments/${commentId}/unreport/${userId}`, {}, {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    return response.data;\n  } catch (error) {\n    var _error$response7, _error$response7$data;\n    console.error('Report error:', error);\n    throw new Error(((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to unreport comment');\n  }\n};","map":{"version":3,"names":["axios","fetchComments","nodeId","userId","response","get","params","data","error","_error$response","_error$response$data","Error","message","refreshComments","_error$response2","_error$response2$data","createComment","content","proStatus","post","headers","_error$response3","_error$response3$data","console","endorseComment","commentId","_error$response4","_error$response4$data","reportComment","_error$response5","_error$response5$data","unendorseComment","_error$response6","_error$response6$data","unreportComment","_error$response7","_error$response7$data"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/services/commentsAPI.js"],"sourcesContent":["// src/services/commentsAPI.js\nimport axios from 'axios';\n\nexport const fetchComments = async (nodeId, userId = null) => {\n  try {\n    const response = await axios.get(`/api/nodes/${nodeId}/comments`, {\n      params: { userId }\n    });\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Network response was not ok');\n  }\n};\n\nexport const refreshComments = async (nodeId) => {\n  try {\n    const response = await axios.get(`/api/nodes/${nodeId}/comments`);\n    return response.data;\n  } catch (error) {\n    throw new Error(error.response?.data?.message || 'Failed to refresh comments');\n  }\n};\n\nexport const createComment = async (nodeId, content, proStatus) => {\n  try {\n    const response = await axios.post(`/api/nodes/${nodeId}/comments`, \n      { content, proStatus },\n      {\n        headers: { \n          'Content-Type': 'application/json',\n          'Accept': 'application/json'\n        }\n      }\n    );\n    return response.data;\n  } catch (error) {\n    console.error('API call error:', error);\n    throw new Error(error.response?.data?.message || 'API request failed');\n  }\n};\n\nexport const endorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(\n      `/api/nodes/${nodeId}/comments/${commentId}/endorse/${userId}`,\n      {},\n      { headers: { 'Content-Type': 'application/json' } }\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Endorse error:', error);\n    throw new Error(error.response?.data?.message || 'Failed to endorse comment');\n  }\n};\n\nexport const reportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(\n      `/api/nodes/${nodeId}/comments/${commentId}/report/${userId}`,\n      {},\n      { headers: { 'Content-Type': 'application/json' } }\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Report error:', error);\n    throw new Error(error.response?.data?.message || 'Failed to report comment');\n  }\n};\n\nexport const unendorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(\n      `/api/${nodeId}/comments/${commentId}/unendorse/${userId}`,\n      {},\n      { headers: { 'Content-Type': 'application/json' } }\n    );\n    return response.data;\n  } catch (error) {\n    console.error('unendorse error:', error);\n    throw new Error(error.response?.data?.message || 'Failed to unendorse comment');\n  }\n};\n\nexport const unreportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await axios.post(\n      `/api/${nodeId}/comments/${commentId}/unreport/${userId}`,\n      {},\n      { headers: { 'Content-Type': 'application/json' } }\n    );\n    return response.data;\n  } catch (error) {\n    console.error('Report error:', error);\n    throw new Error(error.response?.data?.message || 'Failed to unreport comment');\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}