{"ast":null,"code":"// Session check\nexport const checkSession=async()=>{const response=await fetch('/api/user',{credentials:'include'});if(!response.ok){throw new Error('Not authenticated');}return response.json();};// Login\nexport const loginUser=async(email,password)=>{const response=await fetch('/api/login',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email,password}),credentials:'include'});if(!response.ok){throw new Error('Login failed');}return response.json();};// Signup\nexport const signupUser=async(name,email,password)=>{const response=await fetch('/api/signup',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({name,email,password}),credentials:'include'});if(response.status!==201){const error=await response.json();throw new Error(error.error||'Signup failed');}};export const logoutUser=async()=>{const response=await fetch('/api/logout',{method:'POST',credentials:'include'});if(!response.ok){throw new Error('Logout failed');}};// Dashboard data\nexport const getDashboardData=async()=>{const response=await fetch('/dashboard',{credentials:'include'});if(!response.ok){throw new Error('Failed to fetch dashboard data');}return response.json();};export const loginWithGoogleAPI=async token=>{const response=await fetch('/api/auth/google',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({token}),credentials:'include'});if(!response.ok){throw new Error('Google login failed');}return response.json();};","map":{"version":3,"names":["checkSession","response","fetch","credentials","ok","Error","json","loginUser","email","password","method","headers","body","JSON","stringify","signupUser","name","status","error","logoutUser","getDashboardData","loginWithGoogleAPI","token"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeLoginAuth/services/auth.js"],"sourcesContent":["// Session check\n\nexport const checkSession = async () => {\n  const response = await fetch('/api/user', {\n    credentials: 'include',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Not authenticated');\n  }\n  return response.json();\n};\n\n// Login\nexport const loginUser = async (email, password) => {\n  const response = await fetch('/api/login', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ email, password }),\n    credentials: 'include',\n  });\n\n  if (!response.ok) {\n    throw new Error('Login failed');\n  }\n  return response.json();\n};\n\n// Signup\nexport const signupUser = async (name, email, password) => {\n  const response = await fetch('/api/signup', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ name, email, password }),\n    credentials: 'include',\n  });\n\n  if (response.status !== 201) {\n    const error = await response.json();\n    throw new Error(error.error || 'Signup failed');\n  }\n};\n\nexport const logoutUser = async () => {\n  const response = await fetch('/api/logout', {\n    method: 'POST',\n    credentials: 'include',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Logout failed');\n  }\n};\n\n// Dashboard data\nexport const getDashboardData = async () => {\n  const response = await fetch('/dashboard', {\n    credentials: 'include',\n  });\n  \n  if (!response.ok) {\n    throw new Error('Failed to fetch dashboard data');\n  }\n  return response.json();\n};\n\nexport const loginWithGoogleAPI = async (token) => {\n  const response = await fetch('/api/auth/google', {\n    method: 'POST',\n    headers: { 'Content-Type': 'application/json' },\n    body: JSON.stringify({ token }),\n    credentials: 'include',\n  });\n\n  if (!response.ok) {\n    throw new Error('Google login failed');\n  }\n  return response.json();\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}