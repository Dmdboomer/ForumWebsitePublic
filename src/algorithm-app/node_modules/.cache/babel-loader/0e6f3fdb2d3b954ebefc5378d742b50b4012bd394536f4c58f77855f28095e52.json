{"ast":null,"code":"var _s = $RefreshSig$();\nconst BASE_URL = 'http://localhost:5000/api/nodes';\nimport { useAuth } from \"../../CodeLoginAuth/context/AuthContext\";\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        completedScore: score\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\n\n// Base API call function\nconst callReactionApi = async url => {\n  _s();\n  const auth = useAuth();\n  if (!auth || !auth.token) {\n    throw new Error(\"Not authenticated\");\n  }\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${auth.token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n// Reaction methods\n_s(callReactionApi, \"YuJWYXaKIY31b1y7U6yy3IXSxQA=\", false, function () {\n  return [useAuth];\n});\nexport const likeNode = nodeId => callReactionApi(`/api/nodes/${nodeId}/like`);\nexport const dislikeNode = nodeId => callReactionApi(`/api/nodes/${nodeId}/dislike`);\nexport const unlikeNode = nodeId => callReactionApi(`/api/nodes/${nodeId}/unlike`);\nexport const undislikeNode = nodeId => callReactionApi(`/api/nodes/${nodeId}/undislike`);","map":{"version":3,"names":["BASE_URL","useAuth","completeNode","nodeId","score","response","fetch","method","headers","body","JSON","stringify","completedScore","ok","errorData","json","Error","message","statusText","error","console","callReactionApi","url","_s","auth","token","status","likeNode","dislikeNode","unlikeNode","undislikeNode"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/CodeNode/services/nodeAPI.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000/api/nodes';\nimport { useAuth } from \"../../CodeLoginAuth/context/AuthContext\";\n\nexport const completeNode = async (nodeId, score) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/complete`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ completedScore: score }),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(`Failed to complete node: ${errorData.message || response.statusText}`);\n    }\n    return response.json();\n  } catch (error) {\n    console.error(\"Error in completeNode:\", error.message);\n    throw error;\n  }\n};\n\n// Base API call function\nconst callReactionApi = async (url) => {\n  const auth = useAuth();\n  if (!auth || !auth.token) {\n    throw new Error(\"Not authenticated\");\n  }\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${auth.token}`,\n        'Content-Type': 'application/json'\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`API error: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API call failed:', error);\n    throw error;\n  }\n};\n\n// Reaction methods\nexport const likeNode = (nodeId) => \n  callReactionApi(`/api/nodes/${nodeId}/like`);\n\nexport const dislikeNode = (nodeId) => \n  callReactionApi(`/api/nodes/${nodeId}/dislike`);\n\nexport const unlikeNode = (nodeId) => \n  callReactionApi(`/api/nodes/${nodeId}/unlike`);\n\nexport const undislikeNode = (nodeId) => \n  callReactionApi(`/api/nodes/${nodeId}/undislike`);"],"mappings":";AAAA,MAAMA,QAAQ,GAAG,iCAAiC;AAClD,SAASC,OAAO,QAAQ,yCAAyC;AAEjE,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAOC,MAAM,EAAEC,KAAK,KAAK;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGN,QAAQ,IAAIG,MAAM,WAAW,EAAE;MAC7DI,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,cAAc,EAAER;MAAM,CAAC;IAChD,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAAC,4BAA4BF,SAAS,CAACG,OAAO,IAAIZ,QAAQ,CAACa,UAAU,EAAE,CAAC;IACzF;IACA,OAAOb,QAAQ,CAACU,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAACF,OAAO,CAAC;IACtD,MAAME,KAAK;EACb;AACF,CAAC;;AAED;AACA,MAAME,eAAe,GAAG,MAAOC,GAAG,IAAK;EAAAC,EAAA;EACrC,MAAMC,IAAI,GAAGvB,OAAO,CAAC,CAAC;EACtB,IAAI,CAACuB,IAAI,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;IACxB,MAAM,IAAIT,KAAK,CAAC,mBAAmB,CAAC;EACtC;EAEA,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACgB,GAAG,EAAE;MAChCf,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,eAAe,EAAE,UAAUgB,IAAI,CAACC,KAAK,EAAE;QACvC,cAAc,EAAE;MAClB;IACF,CAAC,CAAC;IAEF,IAAI,CAACpB,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAM,IAAIG,KAAK,CAAC,cAAcX,QAAQ,CAACqB,MAAM,EAAE,CAAC;IAClD;IAEA,OAAO,MAAMrB,QAAQ,CAACU,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AAAAI,EAAA,CA1BMF,eAAe;EAAA,QACNpB,OAAO;AAAA;AA0BtB,OAAO,MAAM0B,QAAQ,GAAIxB,MAAM,IAC7BkB,eAAe,CAAC,cAAclB,MAAM,OAAO,CAAC;AAE9C,OAAO,MAAMyB,WAAW,GAAIzB,MAAM,IAChCkB,eAAe,CAAC,cAAclB,MAAM,UAAU,CAAC;AAEjD,OAAO,MAAM0B,UAAU,GAAI1B,MAAM,IAC/BkB,eAAe,CAAC,cAAclB,MAAM,SAAS,CAAC;AAEhD,OAAO,MAAM2B,aAAa,GAAI3B,MAAM,IAClCkB,eAAe,CAAC,cAAclB,MAAM,YAAY,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}