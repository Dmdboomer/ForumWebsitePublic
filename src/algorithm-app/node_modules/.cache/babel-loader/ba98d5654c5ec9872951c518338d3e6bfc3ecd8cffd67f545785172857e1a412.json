{"ast":null,"code":"// src/services/commentsAPI.js\nconst BASE_URL = 'http://localhost:5000/api/nodes';\nexport const fetchComments = async nodeId => {\n  const response = await fetch(`${BASE_URL}/${nodeId}/comments`);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n};\nexport const fetchCommentReactions = async (nodeId, commentId) => {\n  const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}`);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n};\nexport const refreshComments = async nodeId => {\n  const response = await fetch(`${BASE_URL}/${nodeId}/comments`);\n  if (!response.ok) throw new Error('Failed to refresh comments');\n  return response.json();\n};\nexport const createComment = async (nodeId, content) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({\n        content\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error; // Rethrow to let component handle it\n  }\n};\nexport const endorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/endorse`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to endorse comment');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Endorse error:', error);\n    throw error;\n  }\n};\n\n// NEW: Report comment endpoint\nexport const reportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/report`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to report comment');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Report error:', error);\n    throw error;\n  }\n};\nexport const unendorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/unendorse`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to unendorse comment');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Endorse error:', error);\n    throw error;\n  }\n};\n\n// NEW: Report comment endpoint\nexport const unreportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/unreport`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        userId\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to unreport comment');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Report error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["BASE_URL","fetchComments","nodeId","response","fetch","ok","Error","json","fetchCommentReactions","commentId","refreshComments","createComment","content","method","headers","body","JSON","stringify","errorData","message","error","console","endorseComment","userId","reportComment","unendorseComment","unreportComment"],"sources":["/Users/yc/Documents/MainWebsiteTree/ActualWebsite/Algorithm+TopicSutff/algorithm-app/src/services/commentsAPI.js"],"sourcesContent":["// src/services/commentsAPI.js\nconst BASE_URL = 'http://localhost:5000/api/nodes';\n\nexport const fetchComments = async (nodeId) => {\n  const response = await fetch(`${BASE_URL}/${nodeId}/comments`);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n};\n\nexport const fetchCommentReactions = async (nodeId, commentId) => {\n  const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}`);\n  if (!response.ok) throw new Error('Network response was not ok');\n  return response.json();\n};\nexport const refreshComments = async (nodeId) => {\n  const response = await fetch(`${BASE_URL}/${nodeId}/comments`);\n  if (!response.ok) throw new Error('Failed to refresh comments');\n  return response.json();\n};\n\nexport const createComment = async (nodeId, content) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments`, {\n      method: 'POST',\n      headers: { \n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      },\n      body: JSON.stringify({ content })\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'API request failed');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API call error:', error);\n    throw error; // Rethrow to let component handle it\n  }\n};\n\nexport const endorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/endorse`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({userId})\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to endorse comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Endorse error:', error);\n    throw error;\n  }\n};\n\n// NEW: Report comment endpoint\nexport const reportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/report`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({userId})\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to report comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Report error:', error);\n    throw error;\n  }\n};\n\nexport const unendorseComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/unendorse`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({userId})\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to unendorse comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Endorse error:', error);\n    throw error;\n  }\n};\n\n// NEW: Report comment endpoint\nexport const unreportComment = async (nodeId, commentId, userId) => {\n  try {\n    const response = await fetch(`${BASE_URL}/${nodeId}/comments/${commentId}/unreport`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({userId})\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to unreport comment');\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('Report error:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}